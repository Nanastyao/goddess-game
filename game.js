import { initImageCarousel, clearImageCarousel } from './js/imageCarousel.js';

// game.js - –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∏–≥—Ä—ã

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–≥—Ä—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
import { determineSecondArcStart, saveGameState, loadGameState } from './ArcManager.js';
window.game = {
    startSecondArc: async function() {
        console.log('Starting second arc function called'); // –î–æ–±–∞–≤–∏–º –ª–æ–≥
        const nextChapter = determineSecondArcStart(gameState);
        if (nextChapter) {
            console.log(`Loading next chapter: ${nextChapter}`); // –î–æ–±–∞–≤–∏–º –ª–æ–≥
            await loadChapter(nextChapter);
            return true;
        }
        return false;
    }
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
const gameState = {
  currentChapter: null,
  choices: {}, // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ–≤ –∏–≥—Ä–æ–∫–∞
  arc: 1, // –¢–µ–∫—É—â–∞—è –∞—Ä–∫–∞ (1 –∏–ª–∏ 2)
  language: 'ru', // –¢–µ–∫—É—â–∏–π —è–∑—ã–∫
  isBusy: false, // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è)
  dialogueEnded: false, // –§–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
  isChapterEnding: false, // –§–ª–∞–≥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–ª–∞–≤—ã
  generateMessage: false, // –§–ª–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  previousChapter: null, // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ
  lastCheckpoint: {
      chapter: null,
      choices: {}
  }
};

let savedState = null; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è

function getFirstChapterOfCurrentArc() {
    if (gameState.arc === 1) {
        return 'chapter1';
    } else if (gameState.arc === 2) {
        return 'arc2_date_monolog';
    }
    return 'chapter1'; // fallback
}

function saveStateAtChoice() {
    gameState.lastCheckpoint = {
        chapter: gameState.currentChapter,
        choices: JSON.parse(JSON.stringify(gameState.choices)),
        arc: gameState.arc
    };
    console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ç–æ—á–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:', gameState.lastCheckpoint);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Ç–æ—á–∫—É –≤ localStorage
    autoSave();
}

export class LanguageManager {
    constructor() {
        this.currentLang = 'ru';
        this.translations = {
            ru: {
                'end-chapter': '–ö–æ–Ω–µ—Ü –ø–µ—Ä–≤–æ–π –≥–ª–∞–≤—ã',
                'thanks': '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!',
                'to-be-continued': '–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...',
                'new-chapter': '–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≥–ª–∞–≤—É',
                'new-game': '–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É',
                'restart-chapter': '–ù–∞—á–∞—Ç—å –≥–ª–∞–≤—É –∑–∞–Ω–æ–≤–æ',
                'change-lang': '–ü–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫',
                'online': '–æ–Ω–ª–∞–π–Ω'
            },
            en: {
                'end-chapter': 'End of Chapter One',
                'thanks': 'Thanks for playing!',
                'to-be-continued': 'To be continued...',
                'new-chapter': 'Start New Chapter',
                'new-game': 'Start New Game',
                'restart-chapter': 'Restart Chapter',
                'change-lang': 'Change Language',
                'online': 'online'
            }
        };

        this.currentChapter = null;
        this.chapterTranslations = {
            ru: {},
            en: {}
        };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —è–∑—ã–∫
        this.initLanguage();
    }

    initLanguage() {
        const langBtn = document.querySelector('.lang-btn');
        if (langBtn) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            langBtn.textContent = this.currentLang.toUpperCase();
            langBtn.dataset.lang = this.currentLang;
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
            langBtn.addEventListener('click', () => this.toggleLanguage());
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            this.updateTexts();
        }
    }

    toggleLanguage() {
        console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Å', this.currentLang);
        this.currentLang = this.currentLang === 'ru' ? 'en' : 'ru';
        console.log('–Ω–∞', this.currentLang);
        
        const langBtn = document.querySelector('.lang-btn');
        if (langBtn) {
            langBtn.textContent = this.currentLang.toUpperCase();
            langBtn.dataset.lang = this.currentLang;
        }
        
        // –û—á–∏—â–∞–µ–º —á–∞—Ç –ø–µ—Ä–µ–¥ —Å–º–µ–Ω–æ–π —è–∑—ã–∫–∞
        const chatContainer = document.getElementById('chat');
        const choicesContainer = document.getElementById('choices');
        if (chatContainer) chatContainer.innerHTML = '';
        if (choicesContainer) choicesContainer.innerHTML = '';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.updateTexts();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –≤ gameState
        gameState.language = this.currentLang;
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –≥–ª–∞–≤—É —Å –Ω–æ–≤—ã–º —è–∑—ã–∫–æ–º
        if (gameState.currentChapter) {
            loadChapter(gameState.currentChapter);
        }
    }

    setChapterTranslations(translations) {
        if (translations.ru && translations.en) {
            this.chapterTranslations = translations;
            this.currentChapter = gameState.currentChapter;
        }
    }

    updateTexts() {
        try {
            console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –Ω–∞ —è–∑—ã–∫:', this.currentLang);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã –≤ endgame-screen
            const endGameH2 = document.querySelector('.endgame-content h2');
            if (endGameH2) endGameH2.textContent = this.translations[this.currentLang]['end-chapter'];
            
            const endGameP1 = document.querySelector('.endgame-content p:nth-child(2)');
            if (endGameP1) endGameP1.textContent = this.translations[this.currentLang]['thanks'];
            
            const endGameP2 = document.querySelector('.endgame-content p:nth-child(3)');
            if (endGameP2) endGameP2.textContent = this.translations[this.currentLang]['to-be-continued'];
            
            const newChapterBtn = document.querySelector('.start-new-chapter');
            if (newChapterBtn) newChapterBtn.textContent = this.translations[this.currentLang]['new-chapter'];
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–Ω–æ–ø–æ–∫
            const newGameBtn = document.querySelector('.nav-btn--endGame');
            if (newGameBtn) newGameBtn.title = this.translations[this.currentLang]['new-game'];
            
            const restartChapterBtn = document.querySelector('.start-chapter-over');
            if (restartChapterBtn) {
            restartChapterBtn.addEventListener('click', () => {
            if (gameState.isBusy) return;
            restartChapter();
            });
            }
            
            const langBtn = document.querySelector('.lang-btn');
            if (langBtn) langBtn.title = this.translations[this.currentLang]['change-lang'];
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω
            const onlineStatus = document.querySelector('.online-status');
            if (onlineStatus) onlineStatus.textContent = this.translations[this.currentLang]['online'];
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã —Ç–µ–∫—É—â–µ–π –≥–ª–∞–≤—ã
            if (this.currentChapter && this.chapterTranslations[this.currentLang]) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
                const chatMessages = document.querySelectorAll('.chat-messages .message');
                chatMessages.forEach(msg => {
                    const messageId = msg.dataset.messageId;
                    if (messageId && this.chapterTranslations[this.currentLang][messageId]) {
                        msg.textContent = this.chapterTranslations[this.currentLang][messageId];
                    }
                });

                // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                const choices = document.querySelectorAll('.choice-btn');
                choices.forEach(choice => {
                    const choiceId = choice.dataset.choiceId;
                    if (choiceId && this.chapterTranslations[this.currentLang][choiceId]) {
                        choice.textContent = this.chapterTranslations[this.currentLang][choiceId];
                    }
                });
            }

            console.log('–¢–µ–∫—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤:', error);
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Å–æ–≤ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ
function updateClock() {
  const now = new Date();
  const hours = String(now.getHours()).padStart(2, '0');
  const minutes = String(now.getMinutes()).padStart(2, '0');
  document.querySelector('.time').textContent = `${hours}:${minutes}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ PureGram
function loadPuregramPosts() {
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ PureGram');
    const postsContainer = document.getElementById('posts');
    if (!postsContainer) {
        console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    postsContainer.innerHTML = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã
    const posts = [
        {
            image: 'img/lina_post1.jpg',
            caption: '–ú–æ–π –Ω–æ–≤—ã–π —Ñ–æ—Ç–æ—Å–µ—Ç üí´',
            likes: 256
        },
        {
            image: 'img/lina_post2.jpg',
            caption: '–ü—Ä–æ–≥—É–ª–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É ‚òÄÔ∏è',
            likes: 178
        },
        {
            image: 'img/lina_post3.jpg',
            caption: '–§–æ—Ç–æ —Å –Ω–æ–≤–æ–π —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏ üì∏',
            likes: 321
        }
    ];
    
    posts.forEach(post => {
        const postElement = createPostElement(post);
        postsContainer.appendChild(postElement);
    });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ—Å—Ç–∞
function createPostElement(post) {
    const postElement = document.createElement('div');
    postElement.className = 'pg-post';
    
    postElement.innerHTML = `
        <div class="pg-post-header">
            <img src="img/lina_avatar.jpg" class="pg-avatar" alt="Lina">
            <span>Lina</span>
        </div>
        <div class="pg-post-image">
            <img src="${post.image}" alt="Post" class="post-image">
        </div>
        <div class="pg-post-actions">
            <button class="like-btn" data-liked="false">‚ù§Ô∏è ${post.likes}</button>
            <button>üí¨</button>
            <button>üì§</button>
        </div>
        <div class="pg-post-caption">
            <p>${post.caption}</p>
        </div>
    `;
    
    return postElement;
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
function openFullscreenImage(src) {
  const overlay = document.createElement('div');
  overlay.className = 'fullscreen-overlay';

  const img = document.createElement('img');
  img.src = src;
  img.className = 'fullscreen-image';

  const closeBtn = document.createElement('button');
  closeBtn.className = 'fullscreen-close';
  closeBtn.innerHTML = '&times;';
  closeBtn.addEventListener('click', () => {
    document.body.removeChild(overlay);
  });

  overlay.appendChild(closeBtn);
  overlay.appendChild(img);

  document.body.appendChild(overlay);

  overlay.addEventListener('click', (e) => {
    if (e.target === overlay) {
      document.body.removeChild(overlay);
    }
  });
}


// –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤—ã
async function loadChapter(chapterId) {
    document.body.classList.add('loading-chapter');
    document.querySelector('.phone').classList.add('no-transition');
    if (!chapterId) {
        console.error('loadChapter: chapterId is undefined');
        return false;
    }

    clearImageCarousel();
    
    // –û–±—ä—è–≤–ª—è–µ–º chapterPath –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
    let chapterPath;
    
    try {
        console.log(`Loading chapter: ${chapterId}`);
        
        if (chapterId.startsWith('arc2/')) {
            chapterPath = `./chapters/${chapterId}.js`;
            gameState.arc = 2;
        } else if (chapterId.startsWith('arc2_after_date')) {
            chapterPath = `./chapters/arc2/after_date/${chapterId}.js`;
            gameState.arc = 2;
        } else if (chapterId.startsWith('arc2_')) {
            chapterPath = `./chapters/arc2/${chapterId}.js`;
            gameState.arc = 2;
        } else if (chapterId.startsWith('special_')) {
            // –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –≥–ª–∞–≤
            chapterPath = `./chapters/special/${chapterId}.js`;
        } else {
            chapterPath = `./chapters/arc1/${chapterId}.js`;
        }
        
        console.log('Loading from path:', chapterPath);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É URL –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        const fullUrl = new URL(chapterPath, window.location.href).href;
        console.log('Full URL:', fullUrl);
        
        const chapterModule = await import(chapterPath);
        
        if (!chapterModule?.default) {
            console.error(`–û—à–∏–±–∫–∞: –≥–ª–∞–≤–∞ ${chapterId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            return false;
        }
        
        gameState.currentChapter = chapterId;
        autoSave();
        renderChapter(chapterModule.default, false);
        
        return true;
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤—ã ${chapterId}:`, error);
        if (chapterPath) {
            console.error('–ü–æ–ª–Ω—ã–π –ø—É—Ç—å:', new URL(chapterPath, window.location.href).href);
        }
        return false;
    }
    setTimeout(() => {
        document.body.classList.remove('loading-chapter');
    }, 300);
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫
function disabledButtons(disabled) {
  document.querySelector('.nav-btn--endGame').disabled = disabled;
  document.querySelector('.start-chapter-over').disabled = disabled;
  document.querySelector('.lang-btn').disabled = disabled;
}

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
function playMessageSound() {
  const sound = document.getElementById('sound');
  sound.currentTime = 0;
  sound.play().catch(e => console.log('–ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ'));
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
function displayMessages(messages, container, onComplete, chapter) {
    if (!messages || messages.length === 0) {
        if (onComplete) {
            gameState.generateMessage = false;
            disabledButtons(gameState.generateMessage);
            onComplete();
        }
        return;
    }
    
    const messagePromises = messages.map((message, index) => {
        return new Promise(resolve => {
            setTimeout(() => {
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–π
                if (message.type === 'photo') {
                    addMessage('received', message.description, container, message.src);
                } else {
                    addMessage(message.type, message.text, container);
                }
                
                if (message.nextChoice && chapter) {
                    const nextChoice = chapter.getChoicesByKey(message.nextChoice, gameState);
                    if (nextChoice) {
                        const choicesContainer = document.getElementById('choices');
                        renderChoices([{
                            text: nextChoice.text,
                            result: nextChoice.result
                        }], choicesContainer);
                    }
                }
                
                resolve();
            }, message.delay || 1000);
        });
    });
    
    Promise.all(messagePromises).then(() => {
        gameState.generateMessage = false;
        disabledButtons(gameState.generateMessage);
        
        if (onComplete) onComplete();
    });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
function addMessage(type, text, container, image) {
    const savedWidth = container.offsetWidth;
    container.style.width = `${savedWidth}px`;
    const msg = document.createElement('div');
    msg.className = type === 'sent' ? 'message message-sent' : 'message message-received';
    
    const messageId = `msg_${Date.now()}`;
    msg.dataset.messageId = messageId;
    
    if (text) {
        if (window.game.languageManager && window.game.languageManager.chapterTranslations) {
            const currentLang = window.game.languageManager.currentLang;
            const translations = window.game.languageManager.chapterTranslations[currentLang];
            if (translations && translations[messageId]) {
                text = translations[messageId];
            }
        }
        msg.textContent = text;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if (image) {
        const img = document.createElement('img');
        img.src = image;
        img.className = 'chat-image';
        img.alt = ''; // –î–æ–±–∞–≤–ª—è–µ–º alt –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        img.addEventListener('click', () => {
            openFullscreenImage(img.src);
        });
        msg.appendChild(img);
    }
    
    container.appendChild(msg);
    
    if (type === 'received') {
        playMessageSound();
    }
    
    setTimeout(() => {
        container.scrollTo({
            top: container.scrollHeight,
            behavior: 'auto' 
        });
    }, 100);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≥–ª–∞–≤—ã
function renderChapter(chapter, instant = false) {
    // Get messages and choices first
    const messages = chapter.getText(gameState);
    const choices = chapter.getChoices ? chapter.getChoices(gameState) : [];

    // Handle monolog message type first
    if (messages && messages.length > 0 && messages[0].type === "monolog-placeholder") {
        const monolog = messages[0];
        
        // Clear entire chat wrapper
        const chatWrapper = document.querySelector('.chat-wrapper');
        chatWrapper.innerHTML = '';

        // Create monolog container
        const monologContainer = document.createElement('div');
        monologContainer.className = 'monolog-placeholder';
        
        const textDiv = document.createElement('div');
        textDiv.className = 'monolog-content';
        textDiv.innerHTML = monolog.content.split('\n\n').join('<br><br>');
        monologContainer.appendChild(textDiv);
        
        const button = document.createElement('button');
        button.className = 'monolog-button';
        button.textContent = monolog.buttonText || "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å...";
        
        button.addEventListener('click', async () => {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —á–∞—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–π –≥–ª–∞–≤—ã
            chatWrapper.innerHTML = `
                <div class="chat-messages" id="chat"></div>
                <div class="choices" id="choices"></div>
            `;
            
            if (monolog.nextChapter) {
                await loadChapter(monolog.nextChapter);
            }
        });
        
        monologContainer.appendChild(button);
        chatWrapper.appendChild(monologContainer);
        return;
    }

    // Get containers after getMessage call
    const chatContainer = document.getElementById('chat');
    const choicesContainer = document.getElementById('choices');

    if (!chatContainer || !choicesContainer) {
        console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }

    // Clear choices container
    choicesContainer.innerHTML = '';

    // Handle regular messages
    if (instant) {
        messages?.forEach(message => {
            addMessage(message.type, message.text, chatContainer);
        });
        if (choices?.length > 0) {
            renderChoices(choices, choicesContainer);
        }
    } else {
        if (messages?.length > 0) {
            gameState.isBusy = true;
            displayMessages(messages, chatContainer, () => {
                gameState.isBusy = false;
                if (choices?.length > 0) {
                    renderChoices(choices, choicesContainer);
                }
            }, chapter); // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç chapter
        } else if (choices?.length > 0) {
            renderChoices(choices, choicesContainer);
        }
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–±–æ—Ä–∞
function renderChoices(choices, container) {
    console.log("Choices array:", choices);
    if (!container || !choices) return;
    
    container.innerHTML = '';
    const chatContainer = document.getElementById('chat');

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —á–∞—Ç–∞ —Å—Ä–∞–∑—É
    chatContainer.classList.add('has-choices');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤—ã–±–æ—Ä–∞
    container.classList.add('visible');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—á–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤—ã–±–æ—Ä–æ–≤
    saveStateAtChoice();

    choices.forEach(choice => {
        if (choice.type === "photo") {
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Ñ–æ—Ç–æ
            const photoBtn = document.createElement('button');
            photoBtn.className = 'choice-button photo-choice';
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            const btnText = document.createElement('span');
            btnText.textContent = choice.description;
            photoBtn.appendChild(btnText);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const imgPreview = document.createElement('img');
            imgPreview.src = choice.src;
            imgPreview.className = 'choice-image-preview';
            photoBtn.appendChild(imgPreview);
            
            photoBtn.addEventListener('click', async () => {
                if (gameState.isBusy) return;
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ —á–∞—Ç
                addMessage('sent', choice.description, chatContainer, choice.src);
                
                if (choice.nextChapter) {
                    loadChapter(choice.nextChapter);
                }
                
                container.innerHTML = '';
            });
            
            container.appendChild(photoBtn);
        } else {
            // –û–±—ã—á–Ω–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
            const button = document.createElement('button');
            button.className = 'choice-button';
            button.textContent = choice.text;
            
            button.addEventListener('click', async () => {
                if (gameState.isBusy) return;
                
                // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å—ã –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
                chatContainer.classList.remove('has-choices');
                container.classList.remove('visible');
                
                addMessage('sent', choice.text, chatContainer);
                
                if (choice.result && choice.result.length > 0) {
                    gameState.isBusy = true;
                    await displayMessages(choice.result, chatContainer, () => {
                        gameState.isBusy = false;
                        if (choice.result[choice.result.length - 1].nextChapter) {
                            loadChapter(choice.result[choice.result.length - 1].nextChapter);
                        }
                    });
                } else if (choice.nextChapter) {
                    loadChapter(choice.nextChapter);
                }
                
                container.innerHTML = '';
            });
            
            container.appendChild(button);
        }
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Ä–∫–∏
function checkArcCompletion() {
  if (gameState.currentChapter === 'start' || !gameState.currentChapter) {
    return null;
  }

  if (gameState.arc === 1) {
        if (determineSecondArcStart(gameState)) {
            return 'special/special_start'; 
        }
    }

  if (gameState.arc === 1) {
    if (determineSecondArcStart(gameState)) {
      return 'endgame';
    }
  }
  
  if (gameState.arc === 2) {
    const isFinalChapter = gameState.currentChapter === 'arc2_final';
    if (isFinalChapter) {
      return 'endgame';
    }
  }

  return null;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–ª–∞–≤—ã
function showEndgameScreen() {
    saveProgress();
    document.querySelector('[data-screen="endgame"]').classList.add('active');
    document.querySelector('[data-screen="chat"]').classList.remove('active');
    hideNavigation();
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    const startButton = document.querySelector('.start-new-chapter');
    startButton.replaceWith(startButton.cloneNode(true));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    document.querySelector('.start-new-chapter').addEventListener('click', async () => {
        document.querySelector('[data-screen="endgame"]').classList.remove('active');
        document.querySelector('[data-screen="chat"]').classList.add('active');
        showNavigation();
        
        // –û—á–∏—â–∞–µ–º —á–∞—Ç –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π –∞—Ä–∫–∏
        clearChat();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –∞—Ä–∫—É
        if (gameState.arc === 1) {
            // –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è –∞—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –≤—Ç–æ—Ä—É—é
            gameState.arc = 2;
            await loadChapter('arc2_date_monolog');
        } else if (gameState.arc === 2) {
            // –ï—Å–ª–∏ –≤—Ç–æ—Ä–∞—è –∞—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ñ–∏–Ω–∞–ª–∞ –∏–≥—Ä—ã
            console.log('–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }
    });
}

// –°–∫—Ä—ã—Ç–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function hideNavigation() {
  document.querySelector('.nav').style.display = 'none';
}

// –ü–æ–∫–∞–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function showNavigation() {
  document.querySelector('.nav').style.display = 'flex';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
function showScreen(screenId) {
    console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω:', screenId);
    
    const currentActiveScreen = document.querySelector('.screen.active');
    if (currentActiveScreen) {
        currentActiveScreen.classList.remove('active');
    }
    
    const targetScreen = document.querySelector(`.screen[data-screen="${screenId}"]`);
    if (targetScreen) {
        targetScreen.classList.add('active');
        
        if (screenId === 'puregram') {
            loadPuregramPosts();
        }
        
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.screen === screenId);
        });
    }
}


// –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
function startNewGame() {
  gameState.choices = {};
  gameState.arc = 1;
  gameState.isBusy = false;
  gameState.dialogueEnded = false;
  gameState.isChapterEnding = false;
  gameState.generateMessage = false;
  gameState.currentChapter = null;
  
  clearProgress();
  
  clearChat();
  
  showScreen('chat');
  
  showNavigation();
  
  loadChapter('chapter1');
}

// –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞
function clearChat() {
  document.getElementById('chat').innerHTML = '';
  document.getElementById('choices').innerHTML = '';
  gameState.dialogueEnded = false;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ localStorage
function saveProgress() {
    const progress = {
      chapter: gameState.currentChapter,
      arc: gameState.arc,
      language: gameState.language,
      choices: gameState.choices,
      lastCheckpoint: gameState.lastCheckpoint // –í–∞–∂–Ω–æ: –¥–æ–±–∞–≤–ª—è–µ–º lastCheckpoint –≤ –æ–±—ã—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    };
    
    localStorage.setItem('gameProgress', JSON.stringify(progress));
    console.log('–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', progress);
  }
  
  function clearProgress() {
      localStorage.removeItem('gameProgress');
      console.log('–ü—Ä–æ–≥—Ä–µ—Å—Å –æ—á–∏—â–µ–Ω');
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–∫–∂–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Ç–æ—á–∫—É
      gameState.lastCheckpoint = {
          chapter: 'chapter1',
          choices: {},
          arc: 1
      };
  }
  
  function autoSave() {
      if (!gameState.currentChapter) return;
      
      const progress = {
          chapter: gameState.currentChapter,
          arc: gameState.arc,
          language: gameState.language,
          choices: gameState.choices,
          lastCheckpoint: gameState.lastCheckpoint
      };
      
      localStorage.setItem('gameProgress', JSON.stringify(progress));
      console.log('–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:', progress);
  }

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑ localStorage
function loadProgress() {
    const savedProgress = localStorage.getItem('gameProgress');
    
    if (savedProgress) {
        try {
            const progress = JSON.parse(savedProgress);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            gameState.currentChapter = progress.chapter || 'chapter1';
            gameState.arc = progress.arc || 1;
            gameState.language = progress.language || 'ru';
            gameState.choices = progress.choices || {};
            
            // –í–∞–∂–Ω–æ: –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Ç–æ—á–∫—É
            if (progress.lastCheckpoint) {
                gameState.lastCheckpoint = {
                    chapter: progress.lastCheckpoint.chapter,
                    choices: progress.lastCheckpoint.choices || {},
                    arc: progress.lastCheckpoint.arc || progress.arc || 1
                };
            } else {
                gameState.lastCheckpoint = {
                    chapter: progress.chapter || 'chapter1',
                    choices: progress.choices || {},
                    arc: progress.arc || 1
                };
            }
            
            console.log('–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∂–µ–Ω:', progress);
            console.log('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞:', gameState.lastCheckpoint);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤—É –º–≥–Ω–æ–≤–µ–Ω–Ω–æ (–±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏)
            loadChapterInstant(gameState.currentChapter);
            
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
            return false;
        }
    }
    return false;
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ç–µ–∫—É—â–µ–π –≥–ª–∞–≤—ã
function restartChapter() {
    console.log('Restarting chapter with lastCheckpoint:', gameState.lastCheckpoint);
    if (gameState.isBusy) return;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Ç–æ—á–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (gameState.lastCheckpoint && gameState.lastCheckpoint.chapter) {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
        gameState.currentChapter = gameState.lastCheckpoint.chapter;
        gameState.choices = JSON.parse(JSON.stringify(gameState.lastCheckpoint.choices));
        
        // –ï—Å–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç arc, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
        if (gameState.lastCheckpoint.arc) {
            gameState.arc = gameState.lastCheckpoint.arc;
        }
    } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –≥–ª–∞–≤—É –∞—Ä–∫–∏
        const firstChapter = getFirstChapterOfCurrentArc();
        gameState.currentChapter = firstChapter;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±–æ—Ä—ã —Ç–µ–∫—É—â–µ–π –∞—Ä–∫–∏
        const arcPrefix = gameState.arc === 1 ? '' : 'arc2_';
        for (const key in gameState.choices) {
            if (key.startsWith(arcPrefix)) {
                delete gameState.choices[key];
            }
        }
    }
    
    // –û—á–∏—â–∞–µ–º —á–∞—Ç
    clearChat();
    clearImageCarousel();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤—É –∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
    console.log('Loading checkpoint chapter:', gameState.currentChapter);
    loadChapterInstant(gameState.currentChapter);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —á–∞—Ç–∞
    showScreen('chat');
    showNavigation();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤—ã
async function loadChapterInstant(chapterId) {
    if (!chapterId) {
        console.error('loadChapterInstant: chapterId is undefined');
        chapterId = getFirstChapterOfCurrentArc();
    }
    try {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        clearChat();
        gameState.isBusy = false;
        gameState.dialogueEnded = false;
        gameState.generateMessage = false;

        let chapterPath;
        if (chapterId.startsWith('arc2/')) {
            chapterPath = `./chapters/${chapterId}.js`;
            gameState.arc = 2;
        } else if (chapterId.startsWith('arc2_after_date')) {
            chapterPath = `./chapters/arc2/after_date/${chapterId}.js`;
            gameState.arc = 2;
        } else if (chapterId.startsWith('arc2_')) {
            chapterPath = `./chapters/arc2/${chapterId}.js`;
            gameState.arc = 2;
        } else if (chapterId.startsWith('special_')) {
            // –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –≥–ª–∞–≤
            chapterPath = `./chapters/special/${chapterId}.js`;
        } else {
            chapterPath = `./chapters/arc1/${chapterId}.js`;
        }
        
        console.log('Loading chapter instant from path:', chapterPath);

        const chapterModule = await import(chapterPath);
        
        if (!chapterModule?.default) {
            console.error(`–û—à–∏–±–∫–∞: –≥–ª–∞–≤–∞ ${chapterId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            return false;
        }

        const messages = chapterModule.default.getText(gameState);
        const choices = chapterModule.default.getChoices ? chapterModule.default.getChoices(gameState) : [];
        
        const chatContainer = document.getElementById('chat');
        const choicesContainer = document.getElementById('choices');

        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        chatContainer.innerHTML = '';
        choicesContainer.innerHTML = '';

        if (messages && messages.length > 0) {
            if (messages[0].type === "monolog-placeholder") {
                // –ï—Å–ª–∏ —ç—Ç–æ –º–æ–Ω–æ–ª–æ–≥, –∏—Å–ø–æ–ª—å–∑—É–µ–º renderChapter —Å —Ñ–ª–∞–≥–æ–º instant
                renderChapter(chapterModule.default, true);
            } else {
                // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                messages.forEach(message => {
                    const msg = document.createElement('div');
                    msg.className = message.type === 'sent' ? 'message message-sent' : 'message message-received';
                    msg.textContent = message.text;
                    chatContainer.appendChild(msg);
                });

                // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞
                if (choices && choices.length > 0) {
                    renderChoices(choices, choicesContainer);
                }
            }
        }
        
        return true;
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤—ã ${chapterId}:`, error);
        return false;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    window.game.languageManager = new LanguageManager();
    
    updateClock();
    setInterval(updateClock, 60000);

    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –∏–≥—Ä—É –ü–ï–†–ï–î –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π
    if (!loadProgress()) {
        // –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
        const startScreen = document.querySelector('.start-screen');
        if (startScreen) {
            startScreen.classList.add('active');
        }
    }

    const startButton = document.querySelector('.start-game-button');
    if (startButton) {
        startButton.addEventListener('click', function() {
            console.log('–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã');
            
            const startScreen = document.querySelector('.start-screen');
            if (startScreen) {
                startScreen.classList.remove('active');
            }

             // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
             const hasProgress = loadProgress();
        
        if (!hasProgress) {
            // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ù–ê–ú–ï–†–ï–ù–ù–û–ú –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
            gameState.choices = {};
            gameState.arc = 1;
            gameState.isBusy = false;
            gameState.dialogueEnded = false;
            gameState.isChapterEnding = false;
            
            clearProgress();
            clearChat();

            loadChapter('chapter1');
        }
            
            const chatScreen = document.querySelector('[data-screen="chat"]');
            if (chatScreen) {
                chatScreen.classList.add('active');
            }
            
            showNavigation();
            
        });
    }
    
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            const screenId = this.getAttribute('data-screen');
            if (screenId) {
                console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω:', screenId);
                showScreen(screenId);
                
                if (screenId === 'puregram') {
                    loadPuregramPosts();
                }
            }
        });
    });

    const backBtn = document.querySelector('.back-btn');
    if (backBtn) {
        backBtn.addEventListener('click', function(e) {
            e.preventDefault();
            showScreen('chat');
        });
    }

    const restartChapterBtn = document.querySelector('.start-chapter-over');
if (restartChapterBtn) {
    restartChapterBtn.addEventListener('click', (e) => {
        e.preventDefault();
        restartChapter();
    });
}

    const restartArcBtn = document.querySelector('.nav-btn--endGame');
    if (restartArcBtn) {
        restartArcBtn.addEventListener('click', () => {
            if (gameState.isBusy) return;
            
            gameState.choices = {};
            gameState.arc = 1;
            gameState.isBusy = false;
            gameState.dialogueEnded = false;
            gameState.isChapterEnding = false;
            gameState.generateMessage = false;
            gameState.currentChapter = null;
            gameState.previousChapter = null;
            
            clearProgress();
            clearChat();
            
            const chatScreen = document.querySelector('[data-screen="chat"]');
            if (chatScreen) {
                chatScreen.classList.add('active');
            }
            
            loadChapter('chapter1');
            
            showNavigation();
        });
    }

    hideNavigation();
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä—ã
function saveGame() {
  saveProgress();
  alert('–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–≥—Ä—ã
function loadGame() {
  if (loadProgress()) {
    alert('–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');
  } else {
    alert('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–≥—Ä—ã!');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML –∏ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
window.game = {
    ...window.game,
    showScreen,
    startNewGame,
    saveGame,
    loadGame,
    loadChapter,
    openFullscreenImage,
    determineSecondArcStart,
    saveGameState,
    loadGameState,
    clearProgress, // –î–æ–±–∞–≤–ª—è–µ–º –≤ —ç–∫—Å–ø–æ—Ä—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    languageManager: null
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('DOMContentLoaded', () => {
  initGame();
});